---
alwaysApply: true
---

# Project description

Always keep this project description up to date with every additional request for change.

## Project purpose

I want to build a web interface to count eventsin a video for traffic engineering purposes.
The interface allows to efficiently mark down timestamps based on button clicks or keyboard shortcuts.

## User interface

General:

- Use minimalistic design & styling
- All buttons and shortcuts should be clearly visible and easy to understand.

### Input

On top, there is an "add video" button. Clicking it opens a file dialog to select a video file.
The video is added below, next to a "remove" button.
Multiple videos can be added and will play seamlessly as one continuous video feed.

- Next to the first video input, there's an input field to enter the start time as HH:MM:SS.
- Try to infer the start time from video metadata if possible and set it as the default start time upon loading. This includes parsing common filename patterns like YYYYMMDD_HHMMSS or using file modification time as fallback.
- The start time input is only shown and editable for the first video, and upon modification, all HH:MM:SS timestamps need to be recalculated.
- After the first video, we assume that the start time is that of the previous one + the duration of the previous video (auto-calculated and no input field shown).
- For each video, we show the HH:MM:SS - HH:MM:SS for the duration of the video.
- Display video count and provide clear visual feedback when videos are loading.
- The start time input should be clearly labeled and easy to understand.
- Videos cannot be removed if annotations exist for them - show error message.
- There should be a toggle button to hide/show the entire video upload section for a cleaner interface.

### Video preview

Then, there's the video preview.

- The video preview can be in much lower quality than the original video.
- We seemlessly switch between videos one after the other.
- Under the preview window we should show the name of the current video.
- There's a seek bar to seek the video. The bar can seek between all videos (again, they behave as if they are one continuous video).
- The scrubbing bar should take the full width of the video.
- The timestamp information should be below it, displaying both seconds and HH:MM:SS format.
- We should display timestamp information both for all videos together as well as for the individual current video.
- Display format should show: Wall Time (real-world time based on configured start time), Total video Time in HH:MM:SS format with seconds in parentheses, and Current video time in HH:MM:SS format with seconds in parentheses.
- Timeline display should be compact and space-efficient, showing all timing information on a single line with pipe separators.
- There's a play/pause button (shortcut: space).
- There's a mute/unmute button. Videos are muted by default but can be enabled with a button click.
- There's a speed control slider (ranges from 0.1 to 20.0) with current speed display. Shortcuts: `i` to increase speed by 1.0, `u` to decrease speed by 1.0. Holding the button down will keep on increasing or decreasing the speed, similar to how you could hold down arrow keys to change things.
- Pressing the keys `j` and `l` should seek the video by 1 second backward/forward. Pressing Shift + `j`/`l` should seek by 10 seconds backward/forward.
- Pressing the arrow keys `Left` and `Right` should also seek the video by 1 second. Pressing Shift + arrow keys should seek by 10 seconds.

### Event marking

- The event controls should be integrated into the video preview panel for a compact layout.
- We support exactly 5 different events (numbered 1-5)
- The shortcut for the first event is `1`, for the second event is `2`, etc.
- The event marker buttons should be all in one row if possible, so make them smaller.
- It should be possible to give them a custom name via right-click context menu with option: "Change name". Make sure this also updates everywhere upon change.
- Pressing `Backspace` prompts to delete the closest timestamp to the current video preview position.
- Under every event marker there should be a counter of how often it has been counted.
- Each event should have a distinct, strong color with good contrast for visual identification, which is also used in the timestamp table and video indicators.
- Event buttons should have colored backgrounds (not just borders) with white text and text shadows for better visibility.
- Help text should explain that number keys 1-5 mark events, right-click changes names, numbers in parentheses show frequency counts, timeline explanations, and multiple video loading capability.
- Native video player controls should be hidden as we provide custom controls.

### Event display

- Next to the video feed, there's a display of the timestamps as a table
- The video/timestamp sections should be resizable horizontallyto allow users to adjust the layout using a draggable resize handle
- The table is scrollable.
- The list is sorted by the timestamp.
- The list is updated when the timestamps are changed. Note that the user might retroactively add or remove timestamps, so the sorting should be updated accordingly.
- The table can be exported to a CSV file.
- There should be an expand button to show full data in a "fullscreen" modal. 
- For the non-fullscreen view, only show: Event type (name only), timestamp, and actions as symbols
- Double-clicking on the event type should allow changing the event type via a dropdown selector.
- Actions should include: Go to (arrow symbol), Add note (pencil symbol), Delete (trash bin symbol).
- The timestamp closest to the current video position should be highlighted and automatically scrolled to.
- The event display should have its own scrollbar. The event display should always have the size of the screen, not more.
- There should be a built-in dark mode for the app with a toggle button in the header. Dark mode preference should be saved in session storage to persist across page reloads.
- Notes can be added/edited via a modal dialog with a textarea input.
- The full data modal shows additional columns: Time in seconds, Video name, and Note content.

#### CSV file

The CSV file contains the following columns:

- event_index (id of the event)
- event_name (name of the event)
- at_second_first (in seconds from the start of the first video)
- at_second_current (in seconds from the start of the video that the frame belongs to)
- time HH:MM:SS (relative to the start time of the first video)
- video_id (index of the video that the timestamp belongs to)
- video_name (name of the video)
- note (note to the timestamp)

### Top right controls

- The dark/bright mode button should be on the top right
- There should be a cog icon next to it to open a settings modal
- Question mark icon for help
- Toggle button to hide/show video upload section (folder icon)
- All controls should be clearly visible and accessible

#### Setting modal

- j/l forward seeking seconds
- Shift + j/l forward seeking seconds

#### Question mark modal

This should show a list of all shortcuts and their descriptions.

## Technical requirements

- Use React and TypeScript. Prefer to use libraries rather than writing a lot of code.
- Prefer to use CSS frameworks like bootstrap or similar css libraries instead of creating long css files.
- There should be a dark mode for the app with a toggle button in the header. Dark mode preference should be saved in session storage to persist across page reloads.
- We want to deploy the app as a static page in the end, i.e., run it without a server.
- It should be deployed via github pages. Also add the deployment gha to the repo.
- Keep code minimal, clean and well-organized.
- When exceptions occur, provide a detailed error message and the stack trace. Focus on interpretability by a developer, so you do not need to add additional comments.
- Implement proper keyboard event handling with prevention of default behaviors when appropriate.
- Event marking shortcuts (1-5) should work even when other controls are focused, except when actively typing in text inputs.
- Event marking keys (1-5) should not repeat when held down - user must release and press again to mark another event.
- Play/pause (Space) should work even when other controls are focused, except when actively typing in text inputs.
- Application should take the full viewport space with proper responsive layout.
- Speed controls should have fixed width and not auto-expand.
- Use strong, contrasting colors for better accessibility and visual distinction.

## Other requirements

Add an installation guide to the README.md file. Do not add anything else to the README.md file other than how to install and start the application.
